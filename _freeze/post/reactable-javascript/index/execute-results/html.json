{
  "hash": "70aac5ee4795146f1f9519fded124cf5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"A couple useful JavaScript aggregation and formatting functions for {reactable}\"\ndescription: \"Embedding tables into your analytical HTML document\"\nauthor: \"Alex Zajichek\"\ndate: \"7/31/2022\"\nimage: \"feature.png\"\ncategories:\n  - Healthcare\n  - Tables\n  - Javascript\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n---\n\n\n\n\nIn my [last post](https://www.zajichekstats.com/post/filterable-maps/) we demonstrated how to build a filterable map widget into an HTML output that was free of `R` runtime dependency. In continuation of that theme, this article focuses on the [`reactable`](https://glin.github.io/reactable/) package, which enables you to embed interactive data tables into your document. Specifically, we'll look at how we can use its built-in JavaScript interface to define custom functions for commonly-desired aggregation and formatting. \n\n# Table of Contents\n\n* [The Basics](#thebasics)\n  + [Make a summary dataset](#summarydata)\n  + [The default table](#defaulttable)\n  + [Built-in aggregation](#builtinaggregation)\n* [Using the JavaScript Interface](#jsinterface)\n  + [Function 1: Weighted mean](#function1)\n  + [Function 2: Conditional coloring](#function2)\n  + [Final touches](#finaltouches)\n\n# The Basics\n\nLet's start with loading some packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reactable)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n## Make a summary dataset {#summarydata}\n\nFirst we'll need to create a data frame with group-level summary statistics that we want to display. For this example, we'll look at the 30-day hospital readmission rate for heart failure patients on Medicare at the top five (5) most voluminous hospitals in a handful of Midwest states.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import dataset\nreadmission_rates <-\n  read_csv(\n    file = \"/Users/alexzajichek/Documents/GitHub/Unplanned_Hospital_Visits-Hospital.csv\",\n    na = c(\"\", \" \", \"NA\", \"N/A\", \"Not Available\")\n  ) %>%\n  \n  # Filter to states with non-null values\n  filter(\n    State %in% c(\"WI\", \"MN\", \"MI\", \"IL\"),\n    `Measure ID` == \"READM_30_HF\",\n    !is.na(Denominator),\n    !is.na(Score)\n  ) %>%\n  \n  # Convert to proportion\n  mutate(\n    Score = Score / 100\n  ) %>%\n  \n  # Keep a few columns\n  select(\n    State,\n    Hospital = `Facility Name`,\n    Cases = Denominator,\n    `30-Day Readmission Rate` = Score\n  ) %>%\n  \n  # For each state, keep the top 5 most voluminous hospitals\n  group_by(State) %>%\n  slice_max(\n    n = 5,\n    order_by = Cases,\n    with_ties = FALSE\n  ) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 66906 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): Facility ID, Facility Name, Address, City/Town, State, ZIP Code, C...\ndbl  (5): Denominator, Score, Lower Estimate, Higher Estimate, Footnote\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nreadmission_rates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 4\n   State Hospital                                   Cases 30-Day Readmission R…¹\n   <chr> <chr>                                      <dbl>                  <dbl>\n 1 IL    NORTHSHORE UNIVERSITY HEALTHSYSTEM - EVAN…  2294                  0.212\n 2 IL    PALOS COMMUNITY HOSPITAL                    1436                  0.214\n 3 IL    NORTHWESTERN MEMORIAL HOSPITAL              1315                  0.187\n 4 IL    ADVOCATE CHRIST HOSPITAL & MEDICAL CENTER   1287                  0.202\n 5 IL    NORTHWESTERN MEDICINE MCHENRY               1286                  0.177\n 6 MI    BEAUMONT HOSPITAL, TROY                     1683                  0.21 \n 7 MI    BEAUMONT HOSPITAL ROYAL OAK                 1611                  0.2  \n 8 MI    ASCENSION PROVIDENCE HOSPITAL, SOUTHFIELD…  1191                  0.206\n 9 MI    TRINITY HEALTH ANN ARBOR HOSPITAL           1121                  0.191\n10 MI    SPECTRUM HEALTH                             1065                  0.172\n11 MN    MAYO CLINIC HOSPITAL ROCHESTER              1551                  0.173\n12 MN    ABBOTT NORTHWESTERN HOSPITAL                 778                  0.189\n13 MN    PARK NICOLLET METHODIST HOSPITAL             747                  0.213\n14 MN    MERCY HOSPITAL                               742                  0.176\n15 MN    ST CLOUD HOSPITAL                            623                  0.18 \n16 WI    AURORA ST LUKES MEDICAL CENTER              1362                  0.188\n17 WI    FROEDTERT MEMORIAL LUTHERAN HOSPITAL         621                  0.195\n18 WI    UNIVERSITY OF WI  HOSPITALS & CLINICS AUT…   609                  0.219\n19 WI    WAUKESHA MEMORIAL HOSPITAL                   605                  0.171\n20 WI    MILWAUKEE VA MEDICAL CENTER                  604                  0.222\n# ℹ abbreviated name: ¹​`30-Day Readmission Rate`\n```\n\n\n:::\n:::\n\n\n\n## The default table {#defaulttable}\n\nAs a starting point, let's see what we get when we call the `reactable` function without any additional arguments.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadmission_rates %>% reactable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-c9c65e70c67547d67cfb\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c9c65e70c67547d67cfb\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"State\":[\"IL\",\"IL\",\"IL\",\"IL\",\"IL\",\"MI\",\"MI\",\"MI\",\"MI\",\"MI\",\"MN\",\"MN\",\"MN\",\"MN\",\"MN\",\"WI\",\"WI\",\"WI\",\"WI\",\"WI\"],\"Hospital\":[\"NORTHSHORE UNIVERSITY HEALTHSYSTEM - EVANSTON HOSPITAL\",\"PALOS COMMUNITY HOSPITAL\",\"NORTHWESTERN MEMORIAL HOSPITAL\",\"ADVOCATE CHRIST HOSPITAL & MEDICAL CENTER\",\"NORTHWESTERN MEDICINE MCHENRY\",\"BEAUMONT HOSPITAL, TROY\",\"BEAUMONT HOSPITAL ROYAL OAK\",\"ASCENSION PROVIDENCE HOSPITAL, SOUTHFIELD AND NOVI\",\"TRINITY HEALTH ANN ARBOR HOSPITAL\",\"SPECTRUM HEALTH\",\"MAYO CLINIC HOSPITAL ROCHESTER\",\"ABBOTT NORTHWESTERN HOSPITAL\",\"PARK NICOLLET METHODIST HOSPITAL\",\"MERCY HOSPITAL\",\"ST CLOUD HOSPITAL\",\"AURORA ST LUKES MEDICAL CENTER\",\"FROEDTERT MEMORIAL LUTHERAN HOSPITAL\",\"UNIVERSITY OF WI  HOSPITALS & CLINICS AUTHORITY\",\"WAUKESHA MEMORIAL HOSPITAL\",\"MILWAUKEE VA MEDICAL CENTER\"],\"Cases\":[2294,1436,1315,1287,1286,1683,1611,1191,1121,1065,1551,778,747,742,623,1362,621,609,605,604],\"30-Day Readmission Rate\":[0.212,0.214,0.187,0.202,0.177,0.21,0.2,0.206,0.191,0.172,0.173,0.189,0.213,0.176,0.18,0.188,0.195,0.219,0.171,0.222]},\"columns\":[{\"id\":\"State\",\"name\":\"State\",\"type\":\"character\"},{\"id\":\"Hospital\",\"name\":\"Hospital\",\"type\":\"character\"},{\"id\":\"Cases\",\"name\":\"Cases\",\"type\":\"numeric\"},{\"id\":\"30-Day Readmission Rate\",\"name\":\"30-Day Readmission Rate\",\"type\":\"numeric\"}],\"dataKey\":\"313142064b5325150dc6f28c2524bcaa\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nWe get about what we'd expect: a basic, paginated table where each row from our dataset is represented verbatim. There are many things we could clean up here such as rounding, number representations, formatting, and, of course, aggregating the statistics to get state-specific readmission rates.\n\n## Built-in aggregation {#builtinaggregation}\n\nThere are a number of [built-in aggregation functions](#https://glin.github.io/reactable/articles/examples.html#grouping-and-aggregation) available to us by default. We just need to specify:\n\n1. The groups we want the aggregation applied within using the `groupBy` argument\n2. The columns we want to aggregate, and how, using `colDef` within the `columns` argument\n\nLet's add functionality to the table above to aggregate the _total_ case count and the _average_ 30-day readmission rate within each state.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadmission_rates %>%\n  reactable(\n    groupBy = \"State\",\n    columns = \n      list(\n        Cases = colDef(aggregate = \"sum\"),\n        `30-Day Readmission Rate` = colDef(aggregate = \"mean\")\n      )\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-87e4aad21097214fe7b5\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-87e4aad21097214fe7b5\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"State\":[\"IL\",\"IL\",\"IL\",\"IL\",\"IL\",\"MI\",\"MI\",\"MI\",\"MI\",\"MI\",\"MN\",\"MN\",\"MN\",\"MN\",\"MN\",\"WI\",\"WI\",\"WI\",\"WI\",\"WI\"],\"Hospital\":[\"NORTHSHORE UNIVERSITY HEALTHSYSTEM - EVANSTON HOSPITAL\",\"PALOS COMMUNITY HOSPITAL\",\"NORTHWESTERN MEMORIAL HOSPITAL\",\"ADVOCATE CHRIST HOSPITAL & MEDICAL CENTER\",\"NORTHWESTERN MEDICINE MCHENRY\",\"BEAUMONT HOSPITAL, TROY\",\"BEAUMONT HOSPITAL ROYAL OAK\",\"ASCENSION PROVIDENCE HOSPITAL, SOUTHFIELD AND NOVI\",\"TRINITY HEALTH ANN ARBOR HOSPITAL\",\"SPECTRUM HEALTH\",\"MAYO CLINIC HOSPITAL ROCHESTER\",\"ABBOTT NORTHWESTERN HOSPITAL\",\"PARK NICOLLET METHODIST HOSPITAL\",\"MERCY HOSPITAL\",\"ST CLOUD HOSPITAL\",\"AURORA ST LUKES MEDICAL CENTER\",\"FROEDTERT MEMORIAL LUTHERAN HOSPITAL\",\"UNIVERSITY OF WI  HOSPITALS & CLINICS AUTHORITY\",\"WAUKESHA MEMORIAL HOSPITAL\",\"MILWAUKEE VA MEDICAL CENTER\"],\"Cases\":[2294,1436,1315,1287,1286,1683,1611,1191,1121,1065,1551,778,747,742,623,1362,621,609,605,604],\"30-Day Readmission Rate\":[0.212,0.214,0.187,0.202,0.177,0.21,0.2,0.206,0.191,0.172,0.173,0.189,0.213,0.176,0.18,0.188,0.195,0.219,0.171,0.222]},\"columns\":[{\"id\":\"State\",\"name\":\"State\",\"type\":\"character\"},{\"id\":\"Hospital\",\"name\":\"Hospital\",\"type\":\"character\"},{\"id\":\"Cases\",\"name\":\"Cases\",\"type\":\"numeric\",\"aggregate\":\"sum\"},{\"id\":\"30-Day Readmission Rate\",\"name\":\"30-Day Readmission Rate\",\"type\":\"numeric\",\"aggregate\":\"mean\"}],\"groupBy\":[\"State\"],\"dataKey\":\"6cee1cd92fa72a703f67b42832e2ed41\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nThe problem with this table is that the displayed state-level readmission rates represent the _averaged_ rates across the individual hospitals. What we really want in the aggregation is for the hospital-specific rates to be weighted by their respective case volumes so that the state-level readmission rates are correct. This is where JavaScript comes in.\n\n# Using the JavaScript Interface {#jsinterface}\n\nDuring the call to `reactable`, our table is accessible through a JavaScript interface which makes it easy for us to customize the aggregation and formatting behavior when the default options won't suffice. We can use the `JS` function from the [`htmlwidgets`](https://www.htmlwidgets.org/) package to:\n\n1. Define a JavaScript function as a text string\n2. Supply that function as the argument to `colDef` applicable to the function's context\n\n## Function 1: Weighted mean {#function1}\n\nReferring back to our [example](#builtinaggregation), we want to average the 30-day readmission rates over the hospitals within each state, but we need to weight them by their respective case volume. To do this, we can supply a custom JavaScript function to the `aggregate` argument. This function takes the entire vector of values within the group as its argument, as well as the group's rows, and returns a scalar value. We can specify the column containing the case weights directly by name within the row.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweighted_mean <-\n  function(weight) {\n    JS(\n      paste0(\n        \"function(values, rows) {\n          var numerator = 0\n          var denominator = 0\n    \n          rows.forEach(function(row, index) {\n            numerator += row['\", weight, \"'] * values[index]\n            denominator += row['\", weight, \"']\n          })\n    \n          return numerator / denominator\n  \n        }\"\n      )\n    )\n  }\n```\n:::\n\n\n\nIn our implementation, we encoded the `JS` function into an `R` function that calls for the weight column name so we can use it in any `reactable` in which we want this functionality applied. Let's see what our table looks when we plug it in:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadmission_rates %>%\n  reactable(\n    groupBy = \"State\",\n    columns = \n      list(\n        Cases = colDef(aggregate = \"sum\"),\n        `30-Day Readmission Rate` = colDef(aggregate = weighted_mean(weight = \"Cases\"))\n      )\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-80d5fc8451ed2089bbf5\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-80d5fc8451ed2089bbf5\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"State\":[\"IL\",\"IL\",\"IL\",\"IL\",\"IL\",\"MI\",\"MI\",\"MI\",\"MI\",\"MI\",\"MN\",\"MN\",\"MN\",\"MN\",\"MN\",\"WI\",\"WI\",\"WI\",\"WI\",\"WI\"],\"Hospital\":[\"NORTHSHORE UNIVERSITY HEALTHSYSTEM - EVANSTON HOSPITAL\",\"PALOS COMMUNITY HOSPITAL\",\"NORTHWESTERN MEMORIAL HOSPITAL\",\"ADVOCATE CHRIST HOSPITAL & MEDICAL CENTER\",\"NORTHWESTERN MEDICINE MCHENRY\",\"BEAUMONT HOSPITAL, TROY\",\"BEAUMONT HOSPITAL ROYAL OAK\",\"ASCENSION PROVIDENCE HOSPITAL, SOUTHFIELD AND NOVI\",\"TRINITY HEALTH ANN ARBOR HOSPITAL\",\"SPECTRUM HEALTH\",\"MAYO CLINIC HOSPITAL ROCHESTER\",\"ABBOTT NORTHWESTERN HOSPITAL\",\"PARK NICOLLET METHODIST HOSPITAL\",\"MERCY HOSPITAL\",\"ST CLOUD HOSPITAL\",\"AURORA ST LUKES MEDICAL CENTER\",\"FROEDTERT MEMORIAL LUTHERAN HOSPITAL\",\"UNIVERSITY OF WI  HOSPITALS & CLINICS AUTHORITY\",\"WAUKESHA MEMORIAL HOSPITAL\",\"MILWAUKEE VA MEDICAL CENTER\"],\"Cases\":[2294,1436,1315,1287,1286,1683,1611,1191,1121,1065,1551,778,747,742,623,1362,621,609,605,604],\"30-Day Readmission Rate\":[0.212,0.214,0.187,0.202,0.177,0.21,0.2,0.206,0.191,0.172,0.173,0.189,0.213,0.176,0.18,0.188,0.195,0.219,0.171,0.222]},\"columns\":[{\"id\":\"State\",\"name\":\"State\",\"type\":\"character\"},{\"id\":\"Hospital\",\"name\":\"Hospital\",\"type\":\"character\"},{\"id\":\"Cases\",\"name\":\"Cases\",\"type\":\"numeric\",\"aggregate\":\"sum\"},{\"id\":\"30-Day Readmission Rate\",\"name\":\"30-Day Readmission Rate\",\"type\":\"numeric\",\"aggregate\":\"function(values, rows) {\\n          var numerator = 0\\n          var denominator = 0\\n    \\n          rows.forEach(function(row, index) {\\n            numerator += row['Cases'] * values[index]\\n            denominator += row['Cases']\\n          })\\n    \\n          return numerator / denominator\\n  \\n        }\"}],\"groupBy\":[\"State\"],\"dataKey\":\"5e9b112b9cc6b7701b88b671ed5f3c82\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[\"tag.attribs.columns.3.aggregate\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nNow we have correctly calculated the state-level 30-day readmission rates.\n\n## Function 2: Conditional coloring {#function2}\n\nSuppose we would like to differentiate readmission rates in our table that are above or below the national average. To do this, we can define another JavaScript function and supply it to the `style` argument within `colDef`. First, lets pull in the comparison value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnational_rate <-\n  read_csv(\n    file = \"/Users/alexzajichek/Documents/GitHub/Unplanned_Hospital_Visits-National.csv\",\n    na = c(\"Not Available\", \"Not Applicable\")\n  ) %>%\n  \n  # Filter to the measure\n  filter(\n    `Measure ID` == \"READM_30_HF\"\n  ) %>%\n  \n  # Pull the rate\n  pull(`National Rate`)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 14 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Measure ID, Measure Name, Start Date, End Date\ndbl (9): National Rate, Number of Hospitals Worse, Number of Hospitals Same,...\nlgl (1): Footnote\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nnational_rate <- national_rate / 100\nnational_rate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.198\n```\n\n\n:::\n:::\n\n\n\nNext, lets define another `JS` function wrapped in an `R` function that takes the column to evaluate, the comparison value, and the colors to fill in the table cell when it is above or below (or the same as) that threshold. These arguments will feed into the JavaScript function that applies the specified HTML styling to each value in the column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconditional_coloring <-\n  function(column, threshold, color_above, color_below, color_same = \"#fcfffd\") {\n    JS(\n      paste0(\n        \"function(rowInfo) {\n          var value = rowInfo.row['\", column, \"']\n    \n          if(value > \", threshold, \") {\n            var color = '\", color_above, \"'\n          } else if(value < \", threshold, \") {\n            var color = '\", color_below, \"'\n          } else {\n            var color = '\", color_same, \"'\n          }\n    \n          return {background:color}\n        }\"\n      )\n    )\n  }\n```\n:::\n\n\n\nWe can now add it to the table:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadmission_rates %>%\n  reactable(\n    groupBy = \"State\",\n    columns = \n      list(\n        Cases = colDef(aggregate = \"sum\"),\n        `30-Day Readmission Rate` = \n          colDef(\n            aggregate = weighted_mean(weight = \"Cases\"),\n            style = \n              conditional_coloring(\n                column = \"30-Day Readmission Rate\",\n                threshold = national_rate,\n                color_above = \"#eb7554\",\n                color_below = \"#54a637\"\n              )\n          )\n      )\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-5afd9e95b0cfe4deb740\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5afd9e95b0cfe4deb740\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"State\":[\"IL\",\"IL\",\"IL\",\"IL\",\"IL\",\"MI\",\"MI\",\"MI\",\"MI\",\"MI\",\"MN\",\"MN\",\"MN\",\"MN\",\"MN\",\"WI\",\"WI\",\"WI\",\"WI\",\"WI\"],\"Hospital\":[\"NORTHSHORE UNIVERSITY HEALTHSYSTEM - EVANSTON HOSPITAL\",\"PALOS COMMUNITY HOSPITAL\",\"NORTHWESTERN MEMORIAL HOSPITAL\",\"ADVOCATE CHRIST HOSPITAL & MEDICAL CENTER\",\"NORTHWESTERN MEDICINE MCHENRY\",\"BEAUMONT HOSPITAL, TROY\",\"BEAUMONT HOSPITAL ROYAL OAK\",\"ASCENSION PROVIDENCE HOSPITAL, SOUTHFIELD AND NOVI\",\"TRINITY HEALTH ANN ARBOR HOSPITAL\",\"SPECTRUM HEALTH\",\"MAYO CLINIC HOSPITAL ROCHESTER\",\"ABBOTT NORTHWESTERN HOSPITAL\",\"PARK NICOLLET METHODIST HOSPITAL\",\"MERCY HOSPITAL\",\"ST CLOUD HOSPITAL\",\"AURORA ST LUKES MEDICAL CENTER\",\"FROEDTERT MEMORIAL LUTHERAN HOSPITAL\",\"UNIVERSITY OF WI  HOSPITALS & CLINICS AUTHORITY\",\"WAUKESHA MEMORIAL HOSPITAL\",\"MILWAUKEE VA MEDICAL CENTER\"],\"Cases\":[2294,1436,1315,1287,1286,1683,1611,1191,1121,1065,1551,778,747,742,623,1362,621,609,605,604],\"30-Day Readmission Rate\":[0.212,0.214,0.187,0.202,0.177,0.21,0.2,0.206,0.191,0.172,0.173,0.189,0.213,0.176,0.18,0.188,0.195,0.219,0.171,0.222]},\"columns\":[{\"id\":\"State\",\"name\":\"State\",\"type\":\"character\"},{\"id\":\"Hospital\",\"name\":\"Hospital\",\"type\":\"character\"},{\"id\":\"Cases\",\"name\":\"Cases\",\"type\":\"numeric\",\"aggregate\":\"sum\"},{\"id\":\"30-Day Readmission Rate\",\"name\":\"30-Day Readmission Rate\",\"type\":\"numeric\",\"aggregate\":\"function(values, rows) {\\n          var numerator = 0\\n          var denominator = 0\\n    \\n          rows.forEach(function(row, index) {\\n            numerator += row['Cases'] * values[index]\\n            denominator += row['Cases']\\n          })\\n    \\n          return numerator / denominator\\n  \\n        }\",\"style\":\"function(rowInfo) {\\n          var value = rowInfo.row['30-Day Readmission Rate']\\n    \\n          if(value > 0.198) {\\n            var color = '#eb7554'\\n          } else if(value < 0.198) {\\n            var color = '#54a637'\\n          } else {\\n            var color = '#fcfffd'\\n          }\\n    \\n          return {background:color}\\n        }\"}],\"groupBy\":[\"State\"],\"dataKey\":\"a7c42174866e310a6b5cd1fb297a7220\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[\"tag.attribs.columns.3.aggregate\",\"tag.attribs.columns.3.style\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nNote that the national 30-day readmission rate for heart failure patients on Medicare was 19.8%.\n\n## Final touches {#finaltouches}\n\nFinally, let's add a few finishing touches to really make the table pop.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadmission_rates %>%\n  reactable(\n    groupBy = \"State\",\n    columns = \n      list(\n        Cases = colDef(aggregate = \"sum\"),\n        `30-Day Readmission Rate` = \n          colDef(\n            aggregate = weighted_mean(weight = \"Cases\"),\n            style = \n              conditional_coloring(\n                column = \"30-Day Readmission Rate\",\n                threshold = national_rate,\n                color_above = \"#eb7554\",\n                color_below = \"#54a637\"\n              ),\n            format = colFormat(digits = 2, percent = TRUE)\n          )\n      ),\n    striped = TRUE,\n    highlight = TRUE,\n    bordered = TRUE,\n    resizable = TRUE,\n    theme = reactablefmtr::sandstone()\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-7ec32b979b9fa3b5728e\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7ec32b979b9fa3b5728e\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"State\":[\"IL\",\"IL\",\"IL\",\"IL\",\"IL\",\"MI\",\"MI\",\"MI\",\"MI\",\"MI\",\"MN\",\"MN\",\"MN\",\"MN\",\"MN\",\"WI\",\"WI\",\"WI\",\"WI\",\"WI\"],\"Hospital\":[\"NORTHSHORE UNIVERSITY HEALTHSYSTEM - EVANSTON HOSPITAL\",\"PALOS COMMUNITY HOSPITAL\",\"NORTHWESTERN MEMORIAL HOSPITAL\",\"ADVOCATE CHRIST HOSPITAL & MEDICAL CENTER\",\"NORTHWESTERN MEDICINE MCHENRY\",\"BEAUMONT HOSPITAL, TROY\",\"BEAUMONT HOSPITAL ROYAL OAK\",\"ASCENSION PROVIDENCE HOSPITAL, SOUTHFIELD AND NOVI\",\"TRINITY HEALTH ANN ARBOR HOSPITAL\",\"SPECTRUM HEALTH\",\"MAYO CLINIC HOSPITAL ROCHESTER\",\"ABBOTT NORTHWESTERN HOSPITAL\",\"PARK NICOLLET METHODIST HOSPITAL\",\"MERCY HOSPITAL\",\"ST CLOUD HOSPITAL\",\"AURORA ST LUKES MEDICAL CENTER\",\"FROEDTERT MEMORIAL LUTHERAN HOSPITAL\",\"UNIVERSITY OF WI  HOSPITALS & CLINICS AUTHORITY\",\"WAUKESHA MEMORIAL HOSPITAL\",\"MILWAUKEE VA MEDICAL CENTER\"],\"Cases\":[2294,1436,1315,1287,1286,1683,1611,1191,1121,1065,1551,778,747,742,623,1362,621,609,605,604],\"30-Day Readmission Rate\":[0.212,0.214,0.187,0.202,0.177,0.21,0.2,0.206,0.191,0.172,0.173,0.189,0.213,0.176,0.18,0.188,0.195,0.219,0.171,0.222]},\"columns\":[{\"id\":\"State\",\"name\":\"State\",\"type\":\"character\"},{\"id\":\"Hospital\",\"name\":\"Hospital\",\"type\":\"character\"},{\"id\":\"Cases\",\"name\":\"Cases\",\"type\":\"numeric\",\"aggregate\":\"sum\"},{\"id\":\"30-Day Readmission Rate\",\"name\":\"30-Day Readmission Rate\",\"type\":\"numeric\",\"aggregate\":\"function(values, rows) {\\n          var numerator = 0\\n          var denominator = 0\\n    \\n          rows.forEach(function(row, index) {\\n            numerator += row['Cases'] * values[index]\\n            denominator += row['Cases']\\n          })\\n    \\n          return numerator / denominator\\n  \\n        }\",\"format\":{\"cell\":{\"digits\":2,\"percent\":true},\"aggregated\":{\"digits\":2,\"percent\":true}},\"style\":\"function(rowInfo) {\\n          var value = rowInfo.row['30-Day Readmission Rate']\\n    \\n          if(value > 0.198) {\\n            var color = '#eb7554'\\n          } else if(value < 0.198) {\\n            var color = '#54a637'\\n          } else {\\n            var color = '#fcfffd'\\n          }\\n    \\n          return {background:color}\\n        }\"}],\"groupBy\":[\"State\"],\"resizable\":true,\"highlight\":true,\"bordered\":true,\"striped\":true,\"theme\":{\"color\":\"#3e3f3a\",\"backgroundColor\":\"#ffffff\",\"borderColor\":\"#f8f5f0\",\"borderWidth\":\"1px\",\"stripedColor\":\"#ededed\",\"highlightColor\":\"#f8f5f0\",\"cellPadding\":6,\"tableStyle\":{\"fontSize\":15},\"headerStyle\":{\"borderWidth\":\"2px\",\"backgroundColor\":\"#f8f5f0\",\"color\":\"#7c7a78\",\"transitionDuration\":\"0.5s\",\"&:hover[aria-sort]\":{\"color\":\"#000000\"},\"&[aria-sort='ascending'], &[aria-sort='descending']\":{\"color\":\"#000000\"},\"fontSize\":16},\"groupHeaderStyle\":{\"&:not(:empty)\":{\"color\":\"#3e3f3a\",\"fontSize\":16},\"&:hover\":{\"fontWeight\":\"bold\",\"transitionDuration\":\"1s\",\"transitionTimingFunction\":\"ease-out\",\"color\":\"#000000\"}},\"rowSelectedStyle\":{\"backgroundColor\":\"#dfd7ca\",\"color\":\"#8e8c84\"},\"inputStyle\":{\"backgroundColor\":\"#ffffff\",\"borderColor\":\"#bcbfc1\",\"color\":\"#3e3f3a\"},\"searchInputStyle\":{\"backgroundColor\":\"#ffffff\",\"color\":\"#3e3f3a\",\"borderColor\":\"#bcbfc1\",\"&:focus\":{\"color\":\"#3e3f3a\"}},\"selectStyle\":{\"backgroundColor\":\"#dfd7ca\",\"color\":\"#8e8c84\",\"borderColor\":\"#ffffff\",\"outlineColor\":\"#ffffff\"},\"pageButtonStyle\":{\"backgroundColor\":\"#f8f5f0\",\"color\":\"#8e8c84\",\"&:hover\":{\"backgroundColor\":\"#f3969a\",\"color\":\"#8e8c84\"}},\"pageButtonHoverStyle\":{\"backgroundColor\":\"#dfd7ca\",\"color\":\"#8e8c84\"},\"pageButtonActiveStyle\":{\"backgroundColor\":\"#dfd7ca\",\"color\":\"#8e8c84\"},\"pageButtonCurrentStyle\":{\"backgroundColor\":\"#dfd7ca\",\"color\":\"#8e8c84\"}},\"dataKey\":\"786601595b84f910a533a8723f1339ee\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[\"tag.attribs.columns.3.aggregate\",\"tag.attribs.columns.3.style\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-2.0.0/react-tools.umd.cjs\"></script>\n<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}